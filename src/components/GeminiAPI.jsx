import { useState } from "react";
import { GoogleGenAI, Modality } from "@google/genai";

const GeminiAPI = () => {
  const [generatedImage, setGeneratedImage] = useState("");
  const [loading, setLoading] = useState(false);
  const [prompt, setPrompt] = useState(
    "薔薇、ガーベラ、ユーカリのラッピングられた花束生成して"
  );
  const [error, setError] = useState("");

  const handleGenerateImage = async () => {
    setLoading(true);
    setGeneratedImage("");
    setError("");

    try {
      const ai = new GoogleGenAI({
        apiKey: import.meta.env.VITE_GEMINI_API_KEY,
      });

      // 画像生成機能
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash-preview-image-generation",
        contents: prompt,
        config: {
          responseModalities: [Modality.TEXT, Modality.IMAGE],
        },
      });

      // レスポンスを処理
      if (
        response.candidates &&
        response.candidates[0] &&
        response.candidates[0].content.parts
      ) {
        for (const part of response.candidates[0].content.parts) {
          // 画像データ表示
          if (part.inlineData) {
            const imageData = part.inlineData.data;
            setGeneratedImage(`data:image/png;base64,${imageData}`);
          }
        }
      } else {
        setError("画像の生成に失敗しました");
      }
    } catch (error) {
      console.error("Error generating image:", error);
      setError("エラーが発生しました: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: "20px", maxWidth: "600px", margin: "0 auto" }}>
      <button
        onClick={handleGenerateImage}
        disabled={loading || !prompt.trim()}
        style={{
          backgroundColor: loading ? "#ccc" : "#007bff",
          color: "white",
          border: "none",
          padding: "6px 12px",
          borderRadius: "4px",
          fontSize: "12px",
          cursor: loading ? "not-allowed" : "pointer",
        }}
      >
        {loading ? "生成中..." : "画像を生成"}
      </button>

      {error && (
        <div
          style={{
            color: "red",
            marginBottom: "20px",
            padding: "10px",
            backgroundColor: "#ffe6e6",
            border: "1px solid #ff9999",
            borderRadius: "4px",
          }}
        >
          {error}
        </div>
      )}

      {generatedImage && (
        <div style={{ textAlign: "center" }}>
          <h3>生成された画像:</h3>
          <img
            src={generatedImage}
            alt="Generated by AI"
            style={{
              maxWidth: "100%",
              height: "auto",
              border: "1px solid #ddd",
              borderRadius: "8px",
              boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
            }}
          />
        </div>
      )}
    </div>
  );
};

export default GeminiAPI;
