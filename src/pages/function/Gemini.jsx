import { useEffect, useState } from "react";
import { GoogleGenAI, Modality } from "@google/genai";
import Modal from "react-modal";

const customStyles = {
  content: {
    top: "50%",
    left: "50%",
    right: "auto",
    bottom: "auto",
    marginRight: "-50%",
    borderRadius: "1rem",
    transform: "translate(-50%, -50%)",
  },
  overlay: {
    backgroundColor: "rgb(196 196 196 / 75%)",
  },
};

const Gemini = ({ flowerList, openGemini, setOpenGemini, setGetImage }) => {
  const [generatedImage, setGeneratedImage] = useState("");
  const [error, setError] = useState("");

  const changeBase64 = async (url) => {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64 = reader.result.split(",")[1];
        resolve(base64);
      };
      reader.readAsDataURL(blob);
    });
  };

  const [promptImgList, setPromptImgList] = useState([]);

  // const test = [
  //   "of two",
  //   " Celebrity Queen lisianthus flowers",
  //   "two Prima Donna Alstroemeria flowers.",
  // ];
  // const createPrompt = `Create a bouquet${test.join(
  //   "、"
  // )}I'll leave the wrapping to you.`;

  useEffect(() => {
    const convertImagesToBase64 = async () => {
      try {
        const base64Images = await Promise.all(
          flowerList.map((flower) => changeBase64(flower.image))
        );
        setPromptImgList(base64Images);
        console.log("Base64 converted images:", base64Images);
      } catch (error) {
        console.error("Error converting images to base64:", error);
      }
    };

    if (flowerList && flowerList.length > 0) {
      convertImagesToBase64();
    }
  }, [flowerList]);

  const prompt = flowerList.map(
    (flower, index) =>
      `${flower.name},${flower.count}本,${promptImgList[index]}`
  );

  const createPrompt = `ピンク色の${prompt.join(
    "、"
  )}の花束を作って。ラッピングは任せ。`;

  useEffect(() => {
    const fetchImage = async () => {
      setError("");
      try {
        const ai = new GoogleGenAI({
          apiKey: import.meta.env.VITE_GEMINI_API_KEY,
        });
        const response = await ai.models.generateContent({
          model: "gemini-2.0-flash-preview-image-generation",
          contents: createPrompt,
          config: {
            responseModalities: [Modality.TEXT, Modality.IMAGE],
          },
        });
        console.log(response.candidates[0].content.parts);
        if (
          response.candidates &&
          response.candidates[0] &&
          response.candidates[0].content.parts
        ) {
          for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
              const imageData = part.inlineData.data;
              setGeneratedImage(`data:image/png;base64,${imageData}`);
            }
          }
        } else {
          setError("画像の生成に失敗しました");
        }
      } catch (error) {
        console.error("Error generating image:", error);
        setError("エラーが発生しました: " + error.message);
      } finally {
        setGetImage(false);
      }
    };

    fetchImage();
  }, []);

  const closeModal = () => {
    return setOpenGemini(false);
  };

  return (
    <Modal isOpen={openGemini} onRequestClose={closeModal} style={customStyles}>
      <div style={{ padding: "20px", maxWidth: "600px", margin: "0 auto" }}>
        {error && (
          <div
            style={{
              color: "red",
              marginBottom: "20px",
              padding: "10px",
              backgroundColor: "#ffe6e6",
              border: "1px solid #ff9999",
              borderRadius: "4px",
            }}
          >
            {error}
          </div>
        )}
        {generatedImage ? (
          <div style={{ textAlign: "center" }}>
            <h3>作成した花束:</h3>
            <img
              src={generatedImage}
              alt="Generated by AI"
              style={{
                maxWidth: "70%",
                height: "70%",
                border: "1px solid #ddd",
                borderRadius: "8px",
                boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
              }}
            />
          </div>
        ) : (
          <h1>花束作成中...</h1>
        )}
      </div>
      <div className="modalPage-buttons">
        <button onClick={closeModal} className="modal-button apply">
          作成しなおす
        </button>
      </div>
    </Modal>
  );
};

export default Gemini;
