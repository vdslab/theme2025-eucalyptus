import { useEffect, useState } from "react";
import { GoogleGenAI, Modality } from "@google/genai";
import Modal from "react-modal";

const customStyles = {
  content: {
    top: "50%",
    left: "50%",
    right: "auto",
    bottom: "auto",
    marginRight: "-50%",
    borderRadius: "1rem",
    transform: "translate(-50%, -50%)",
  },
  overlay: {
    backgroundColor: "rgb(196 196 196 / 75%)",
  },
};

const Gemini = ({ flowerList, openGemini, setOpenGemini, setGetImage }) => {
  const [generatedImage, setGeneratedImage] = useState("");
  const [prompt, setPrompt] = useState(
    "薔薇、ガーベラ、ユーカリのラッピングられた花束の画像生成して"
  );
  const [error, setError] = useState("");

  console.log(flowerList);
  useEffect(() => {
    const fetchImage = async () => {
      setError("");
      try {
        const ai = new GoogleGenAI({
          apiKey: import.meta.env.VITE_GEMINI_API_KEY,
        });

        const response = await ai.models.generateContent({
          model: "gemini-2.0-flash-preview-image-generation",
          contents: prompt,
          config: {
            responseModalities: [Modality.TEXT, Modality.IMAGE],
          },
        });

        if (
          response.candidates &&
          response.candidates[0] &&
          response.candidates[0].content.parts
        ) {
          for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
              const imageData = part.inlineData.data;
              setGeneratedImage(`data:image/png;base64,${imageData}`);
            }
          }
        } else {
          setError("画像の生成に失敗しました");
        }
      } catch (error) {
        console.error("Error generating image:", error);
        setError("エラーが発生しました: " + error.message);
      } finally {
        setGetImage(false);
      }
    };

    fetchImage();
  }, []);

  const closeModal = () => {
    return setOpenGemini(false);
  };

  return (
    <Modal isOpen={openGemini} onRequestClose={closeModal} style={customStyles}>
      <div style={{ padding: "20px", maxWidth: "600px", margin: "0 auto" }}>
        {error && (
          <div
            style={{
              color: "red",
              marginBottom: "20px",
              padding: "10px",
              backgroundColor: "#ffe6e6",
              border: "1px solid #ff9999",
              borderRadius: "4px",
            }}
          >
            {error}
          </div>
        )}
        {generatedImage ? (
          <div style={{ textAlign: "center" }}>
            <h3>作成した花束:</h3>
            <img
              src={generatedImage}
              alt="Generated by AI"
              style={{
                maxWidth: "70%",
                height: "70%",
                border: "1px solid #ddd",
                borderRadius: "8px",
                boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
              }}
            />
          </div>
        ) : (
          <h1>花束作成中...</h1>
        )}
      </div>
      <div className="modalPage-buttons">
        <button onClick={closeModal} className="modal-button apply">
          作成しなおす
        </button>
      </div>
    </Modal>
  );
};

export default Gemini;
